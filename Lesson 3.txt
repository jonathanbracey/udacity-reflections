When would you want to use a remote repository rather than keeping all your work local?

It would most want to use remote repositories when collaborationg with others, so people
can work on code together, and merge it more easily. This could work well for a
collaboration between friends, or working with people online for a big project. In fact,
I could see remote repositories on GitHub being useful for finding coding opportunities,
because we can collaborate on projects with people we don't know (at least,
don't know yet). It could be a great way to garner experience, and learn a lot
from veteran coders. 

It could also be great for showing off code to others, so they can test it, and
give their impressions (likes, dislikes, bugs found, new features). As new 
features are created, new branches can be made till that feature is bug-free, and 
working as intended. This type of public coding could allow others with the 
knowledge and desire to potentially jump in, make some changes (additions,
optimizations, etc.), and present them to original coder. All that could lead
to the original coder learning something from a veteran coder (as seen above).

Working with, and learning from, others seems to be the biggest positives for me.
I suppose it make sense for teaching others to be added, too.


Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

If we're working on a file, then we wouldn't want Git to try to pull changes
another person has made before we're done working on our part of the file.
I'm not entirely sure what would happen if Git pulled in a newly change file 
that I am already working on. What would happen to the commits? If I have a file
with sections A, B, and C in it, but a newly pulled version of that file is dropped
into my working directory with sections A, B, and D in it, then what happens when I
save my file? I have a commit with A and B, a commit with A, B, and D, and commit with
A, B, and C. Would I have to merge those last two? I may have to try that out sometime
with an unimportant file (add a commit online, pull it in while I already have the 
file open locally, then make a commit locally).

Update: I gave this a try. I created a file locally, and pushed it to GitHub.
Next, I made a commit on GitHub after adding a little bit of text. Then, I opened 
the local file, added a section, saved it, and closed it. Then I tried to pull the 
file from GitHub, but (a good 'but'!) I received the following error:
-----
error: Your local changes to the following files would be overwritten by merge:
        Commit1.txt
Please, commit your changes or stash them before you can merge.
Aborting
-----
Great! Now I have just used 'git add' and 'git commit' to my file. I tried to 
use 'git pull' again, and now I have a merge conflict. Perfect. I thought I would
have to merge them, so this makes sense. I resolved the conflict, then did the
normal ('git add' , 'git commit' , 'git push origin master'). Now both files,
remotely and locally, are the same. 
Auto-pulling could lead to merge conflicts, and that's why we don't want it.
Good to know!


Describe the differences between forks, clones, and branches.
When would you use one instead of another?

Clones are when a repository is copied, from a remote or local drive,
to your computer.
Forks are a GitHub feature that copies a repository from another user to
yourself. Changes made to it do not affect the other user. A link back to
the original user's GitHub is present, which is a nice way of giving credit.
Branches are splits in a commit line where the same code goes two different
paths, but at one time shared the same commit line before the split.
I would use clone when I want to work on a repository on my computer that is
present on a remote drive. If I want to do any changes to it on my computer, 
and not have any plans to push it onto GitHub, then I would clone it. I can 
always push it to GitHub at a later date if I'm happy with my work, want to share
it with others, or want to collaborate on it.
I would use fork if I want to do separate work on someone else's GitHub repository
that I don't have access to, and I want to keep it on GitHub. If that is the case,
then I would fork it to my GitHub account and work on it there.
I would mostly use branches when I want to work on a new feature separately from
my main code, so I don't introduce new bugs to my 'good' code, or anytime I want
to try something different without affecting what I have already completed.


What is the benefit of having a copy of the last known state of the remote
stored locally?

If Git has the copy of the last known state of the remote, then we can 
use 'git status' to check to see if we have any local commits that have
yet to be pushed. If we do have local commits that need to be pushed,
then we can check to see if there are any new commits remotely, so we'll
have an idea as to whether or not we have have to do some merging.
Depending on the time, I may not want to start merging files, and would 
rather leave it till after lunch, after a meeting, the next day, etc.


How would you collaborate without using Git or GitHub? 
What would be easier, and what would be harder?

Firstly, the group would have to determine who works on which pieces of
code, so when we try to put it together we will, hopefully, have less
sections of code that was changed by more than one person. I we all work
on creating new features, then it would be best, but otherwise we would have
to keep in contact to make sure we're not working on the same section.
Secondly, we'd have to come up with a way of sending code to the others. That
coud be done through e-mail, drop box, Google drive, etc. However, once the code
is sent, then we need one person to manually merge it, and that could be a
difficult job if we didn't communicate well enough during the coding process.
One section would be merged at a time with the main code (under a different
name, if I was doing it), then bug checked before adding it to the main code (the
master branch, as Git would call it). It would be a tedious process for one
person to undertake, even if all the code worked, since adding in each section
one at a time, testing it, merging it into the main code, etc. Once it is together, 
and distributed to everyone else, then we would have to start all over.
Some of this is typical collaboration, with or without Git and GitHub, like
deciding who works on which parts of the code or adds which features, but the manual 
merging is the more difficult and time-consuming part. Git and GitHub would definitely 
make collaboration easier, in my opinion.