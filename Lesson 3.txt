When would you want to use a remote repository rather than keeping all your work local?

It would most want to use remote repositories when collaborationg with others, so people
can work on code together, and merge it more easily. This could work well for a
collaboration between friends, or working with people online for a big project. In fact,
I could see remote repositories on GitHub being useful for finding coding opportunities,
because we can collaborate on projects with people we don't know (at least,
don't know yet). It could be a great way to garner experience, and learn a lot
from veteran coders. 

It could also be great for showing off code to others, so they can test it, and
give their impressions (likes, dislikes, bugs found, new features). As new 
features are created, new branches can be made till that feature is bug-free, and 
working as intended. This type of public coding could allow others with the 
knowledge and desire to potentially jump in, make some changes (additions,
optimizations, etc.), and present them to original coder. All that could lead
to the original coder learning something from a veteran coder (as seen above).

Working with, and learning from, others seems to be the biggest positives for me.
I suppose it make sense for teaching others to be added, too.


Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

If we're working on a file, then we wouldn't want Git to try to pull changes
another person has made before we're done working on our part of the file.
I'm not entirely sure what would happen if Git pulled in a newly change file 
that I am already working on. What would happen to the commits? If I have a file
with sections A, B, and C in it, but a newly pulled version of that file is dropped
into my working directory with sections A, B, and D in it, then what happens when I
save my file? I have a commit with A and B, a commit with A, B, and D, and commit with
A, B, and C. Would I have to merge those last two? I may have to try that out sometime
with an unimportant file (add a commit online, pull it in while I already have the 
file open locally, then make a commit locally).

Update: I gave this a try. I created a file locally, and pushed it to GitHub.
Next, I made a commit on GitHub after adding a little bit of text. Then, I opened 
the local file, added a section, saved it, and closed it. Then I tried to pull the 
file from GitHub, but (a good 'but'!) I received the following error:
-----
error: Your local changes to the following files would be overwritten by merge:
        Commit1.txt
Please, commit your changes or stash them before you can merge.
Aborting
-----
Great! Now I have just used 'git add' and 'git commit' to my file. I tried to 
use 'git pull' again, and now I have a merge conflict. Perfect. I thought I would
have to merge them, so this makes sense. I resolved the conflict, then did the
normal ('git add' , 'git commit' , 'git push origin master'). Now both files,
remotely and locally, are the same. 
Auto-pulling could lead to merge conflicts, and that's why we don't want it.
Good to know!
